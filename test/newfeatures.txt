# New features

This is a test file for the new features I added to commonmark.  (Until I get to a loadable version).

{toc}

## Table of content nodes

A {toc} at the start of a line will cause all header nodes to the
proper depth to be inserted at the point of {toc}.  A {toc} is a leaf
container.

```````````````````````````````` example
# level 1

{toc}

# level 1 (second)

## level 2

## level 2 (second)

# level 1 (third)
.
<h1>level 1</h1>
<div class="toc"><ol><li>level 1</li><li>level 1 (second)</li><ol><li>level 2</li><li>level 2 (second)</li></ol><li>level 1 (third)</li></div>
<h1>level 1 (second)</h1>
<h2>level 2</h2>
<h2>level 2 (second)</h2>
<h1>level 1 (third)</h1>
````````````````````````````````

If a depth is specified in the toc node, then the table of contents
will have only `depth` levels.  A `depth` of 0 means there is no limit
on the depth.

```````````````````````````````` example
# level 1

{toc:0}

# level 1 (second)

## level 2

## level 2 (second)

# level 1 (third)
.
<h1>level 1</h1>
<div class="toc"><ol><li>level 1</li><li>level 1 (second)</li><ol><li>level 2</li><li>level 2 (second)</li></ol><li>level 1 (third)</li></div>
<h1>level 1 (second)</h1>
<h2>level 2</h2>
<h2>level 2 (second)</h2>
<h1>level 1 (third)</h1>
````````````````````````````````

and, if we only want the top level:

```````````````````````````````` example
# level 1

{toc:1}

# level 1 (second)

## level 2

## level 2 (second)

# level 1 (third)
.
<h1>level 1</h1>
<div class="toc"><ol><li>level 1</li><li>level 1 (second)</li><li>level 1 (third)</li></div>
<h1>level 1 (second)</h1>
<h2>level 2</h2>
<h2>level 2 (second)</h2>
<h1>level 1 (third)</h1>
````````````````````````````````

A toc node must be in the first column, so

```````````````````````````````` example
# level 1

 {toc} is not a table of contents.  Neither is {toc}.

A {toc} does not interrupt a list, codeblock, etc.

- {toc} is treated literally
- and this iss second item of list.

# level 1 (second)

## level 2

## level 2 (second)

Here is an actual table of contents:

{toc}

# level 1 (third)
.
<h1>level 1</h1>
<p>{toc} is not a table of contents.  Neither is {toc}.</p>
<p>A {toc} does not interrupt a list, codeblock, etc.</p>
<ul>
<li>{toc} is treated literally</li>
<li>and this iss second item of list.</li>
</ul>
<h1>level 1 (second)</h1>
<h2>level 2</h2>
<h2>level 2 (second)</h2>
<p>Here is an actual table of contents:</p>
<div class="toc"><ol><li>level 1</li><li>level 1 (second)</li><ol><li>level 2</li><li>level 2 (second)</li></ol><li>level 1 (third)</li></div>
<h1>level 1 (third)</h1>
````````````````````````````````

That's it for table of content nodes.

## Question nodes

Used to number questions in exams, `{question:level}` is an inline
element which will do proper numbering with sub-questions.  If
`:level` is not present, then the base level, level 1, is assumed.

```````````````````````````````` example
{question} one
{question} two
{question:1} three
{question:2} three-1
{question:2} three-2
{question:2} three-3
{question} four
{question:2} four-1
{question:2} four-2
.
<p><span class="qnum qlevel1">1</span> one
<span class="qnum qlevel1">2</span> two
<span class="qnum qlevel1">3</span> three
<span class="qnum qlevel2">3.A</span> three-1
<span class="qnum qlevel2">3.B</span> three-2
<span class="qnum qlevel2">3.C</span> three-3
<span class="qnum qlevel1">4</span> four
<span class="qnum qlevel2">4.A</span> four-1
<span class="qnum qlevel2">4.B</span> four-2</p>
````````````````````````````````

Question numbering is different per level with arabic numbers at level 1, capital letters at level 2, roman numbers at level 3, and lower case letters at level 4.  This sequence repeats as necessary.  \{question} nodes are inlines so they can appear anywhere (but obviouslny not in codeblocks).


```````````````````````````````` example
{question} one
{question} two
{question:1} three
{question:2} three-1
{question:2} three-2
{question:2} three-3
{question} four
{question:2} four-1
{question:2} four-2
{question:3} four-2-one
{question:3} four-2-two
{question} five
{question:2} five-1
{question:3} five-1-one
{question:4} five-1-one-A
{question:4} five-1-one-B
{question:4} five-1-one-C
{question:4} five-1-one-D
{question:4} five-1-one-E
{question:3} five-2
{question:3} five-3
{question:3} five-4
{question:3} five-5
{question:3} five-6
{question:3} five-7
{question:1} six
{question} seven
{question:3} seven-0-one
{question:3} seven-0-two

> and here we have {question} nodes inside other ndoes {question}

But not inside code blocks

```
this is code {question}
{question}
```

- But definitely inside lists {question}
- {question} and {question:2} and {question:2}
- {question:2} and back {question}
.
<p><span class="qnum qlevel1">1</span> one
<span class="qnum qlevel1">2</span> two
<span class="qnum qlevel1">3</span> three
<span class="qnum qlevel2">3.A</span> three-1
<span class="qnum qlevel2">3.B</span> three-2
<span class="qnum qlevel2">3.C</span> three-3
<span class="qnum qlevel1">4</span> four
<span class="qnum qlevel2">4.A</span> four-1
<span class="qnum qlevel2">4.B</span> four-2
<span class="qnum qlevel3">4.B.i</span> four-2-one
<span class="qnum qlevel3">4.B.ii</span> four-2-two
<span class="qnum qlevel1">5</span> five
<span class="qnum qlevel2">5.A</span> five-1
<span class="qnum qlevel3">5.A.i</span> five-1-one
<span class="qnum qlevel4">5.A.i.a</span> five-1-one-A
<span class="qnum qlevel4">5.A.i.b</span> five-1-one-B
<span class="qnum qlevel4">5.A.i.c</span> five-1-one-C
<span class="qnum qlevel4">5.A.i.d</span> five-1-one-D
<span class="qnum qlevel4">5.A.i.e</span> five-1-one-E
<span class="qnum qlevel3">5.A.ii</span> five-2
<span class="qnum qlevel3">5.A.iii</span> five-3
<span class="qnum qlevel3">5.A.iv</span> five-4
<span class="qnum qlevel3">5.A.v</span> five-5
<span class="qnum qlevel3">5.A.vi</span> five-6
<span class="qnum qlevel3">5.A.vii</span> five-7
<span class="qnum qlevel1">6</span> six
<span class="qnum qlevel1">7</span> seven
<span class="qnum qlevel3">7.@.i</span> seven-0-one
<span class="qnum qlevel3">7.@.ii</span> seven-0-two</p>
<blockquote>
<p>and here we have <span class="qnum qlevel1">8</span> nodes inside other ndoes <span class="qnum qlevel1">9</span></p>
</blockquote>
<p>But not inside code blocks</p>
<pre><code>this is code {question}
{question}
</code></pre>
<ul>
<li>But definitely inside lists <span class="qnum qlevel1">10</span></li>
<li><span class="qnum qlevel1">11</span> and <span class="qnum qlevel2">11.A</span> and <span class="qnum qlevel2">11.B</span></li>
<li><span class="qnum qlevel2">11.C</span> and back <span class="qnum qlevel1">12</span></li>
</ul>
````````````````````````````````

A smaller test case for question nodes in lists.

```````````````````````````````` example
- But `definitely` inside `lists` {question}
- {question} and {question:2} and {question:2}
- {question:2} and back {question}
.
<ul>
<li>But <code>definitely</code> inside <code>lists</code> <span class="qnum qlevel1">1</span></li>
<li><span class="qnum qlevel1">2</span> and <span class="qnum qlevel2">2.A</span> and <span class="qnum qlevel2">2.B</span></li>
<li><span class="qnum qlevel2">2.C</span> and back <span class="qnum qlevel1">3</span></li>
</ul>
````````````````````````````````

## Local Names for links within a document

```````````````````````````````` example
We can create local anchors, e.g., {#start} and then link to them with either [an inner link](#start) or and autolink, e.g., <#start>.
.
<p>We can create local anchors, e.g., <span id="start" /> and then link to them with either <a href="#start">an inner link</a> or and autolink, e.g., <a href="#start">start</a>.</p>
````````````````````````````````

This loosens syntax of autolink's to include those which start with
`#`, so now there are three, emails, absolute URIs, and internal
links.

## Including other files

Include other files either by path or url. `<<path>>` would include `path` into the spot it is.  This is a block element.

```````````````````````````````` example
This will test the include functionality.

<<included.md>>

Above this should be the text from `included.md`.
.
<p>This will test the include functionality.</p>
<p>This is stuff from <em>included.md</em>.</p>
<p>Above this should be the text from <code>included.md</code>.</p>
````````````````````````````````


## tables

Complex table with code, questions, blanks, and quoted blocks inside

```````````````````````````````` example
Before the table.

{table:begin:3:|}
EXAMPLE    | `*x` | `0x2FB8`
{question} | `*((int *) x)` | {blank:10}
{question} | `*(x + 10)` | {blank:10}
{question} | 
`*(((char *) x) + 7)` | 
> {blank:10}

{question} | `*(((char *)(x + 3)) + 3)` | {blank:10}
{question} | `*((short *)(((int *) x) + 9))` | {blank:10}
{question} | `*(((short *)(((int *) x) + 6)) + 8)` | {blank:10}
{question} | `*((int *) (((char *)(x + 3)) + 5))` | {blank:10}
{table:end}

after the table.
.
<p>Before the table.</p>
<table><tr><td>EXAMPLE</td>
<td><code>*x</code></td>
<td><code>0x2FB8</code></td>
</tr>
<tr><td><code>*((int *) x)</code></td>
<td><input type="text" id="Q0" name="textQ0" size="10" /></td>
<td><code>*(x + 10)</code></td>
</tr>
<tr><td><input type="text" id="Q1" name="textQ1" size="10" /></td>
<td><code>*(((char *) x) + 7)</code></td>
<td></td>
</tr>
<tr><td>
<blockquote>
<p><input type="text" id="Q2" name="textQ2" size="10" /></p>
</blockquote>
<p><span class="qnum qlevel1">1</span></p>
</td>
<td><code>*(((char *)(x + 3)) + 3)</code></td>
<td><input type="text" id="Q3" name="textQ3" size="10" /></td>
</tr>
<tr><td><code>*((short *)(((int *) x) + 9))</code></td>
<td><input type="text" id="Q4" name="textQ4" size="10" /></td>
<td><code>*(((short *)(((int *) x) + 6)) + 8)</code></td>
</tr>
<tr><td><input type="text" id="Q5" name="textQ5" size="10" /></td>
<td><code>*((int *) (((char *)(x + 3)) + 5))</code></td>
<td><input type="text" id="Q6" name="textQ6" size="10" /></td>
</tr>
</table>
<p>after the table.</p>
````````````````````````````````

## exam questions

Multiple choice, only 1 selection valid:

```````````````````````````````` example
{radio:begin}
{answer:a} one asd
{answer:b}  two asd
{radio:end}
.
<form class="mcquestion" id="Q0"><input type="radio" name="radioQ0" value="a" />
<p>one asd</p>
<input type="radio" name="radioQ0" value="b" />
<p>two asd</p>
</form>
````````````````````````````````

## attributes, e.g., CSS

Including `{:attr:}` will include attr on the closest inline element to the left.  If there is no inline element to the left, then on the enclosing block.  Finally, if it is at the start of a line, then the immediatly following block.

```````````````````````````````` example
Hi. this `a code "backtick" containing` para is class threecol {:class="threecol":} and this *strong*. {: class="onstrong" :}

{:class="next":}
This para should have class next.
.
<p>Hi. this <span class="threecol"><code>a code &quot;backtick&quot; containing</code></span> para is class threecol  and this <span class="onstrong"><em>strong</em></span>. </p>
<div class="next">
<p>
This para should have class next.</p>
</div>
````````````````````````````````

can have multiple attributes in the same list.  However, to simplify things we limit values to those surrounded by double quotes.


```````````````````````````````` example
Hi. this `a code "backtick" containing` para is {: class="threecol" id='foo' :} and this *strong*.
.
<p>Hi. this <span class="threecol" id="foo"><code>a code &quot;backtick&quot; containing</code></span> para is  and this <em>strong</em>.</p>
````````````````````````````````


## Combined test for both questions and anchor in same doc

```````````````````````````````` example
- {#top} But `definitely` inside `lists` {question}
- {question} and {question:2} and {question:2}
- {question:2} and back {question}

Goto <#top>.
.
<ul>
<li><span id="top" /> But <code>definitely</code> inside <code>lists</code> <span class="qnum qlevel1">1</span></li>
<li><span class="qnum qlevel1">2</span> and <span class="qnum qlevel2">2.A</span> and <span class="qnum qlevel2">2.B</span></li>
<li><span class="qnum qlevel2">2.C</span> and back <span class="qnum qlevel1">3</span></li>
</ul>
<p>Goto <a href="#top">top</a>.</p>
````````````````````````````````


# template for an example which will be tested.

```````````````````````````````` example
.
````````````````````````````````
